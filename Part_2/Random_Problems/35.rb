=begin

You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.

Return the minimum number of steps to make the given string empty.

A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.

A string is called palindrome if is one that reads the same backward as well as forward.

# Problem
- Given a string containing only letters 'a' and 'b'
- Find the minimum number of times of removing palindrome substring in the string to make the string empty

# Algorithm
"baabb" 

- Initialize `count` to 0
- Until the string is empty,
  - Get all possible substrings
  - Select the substrings that are palindromes
  - Find the longest palindromes
  - Remove that longest palindromes from the string
  - Increment `count` by 1
- Return `count`

- A method to get all possible substrings
- A method to check if a string is a palindrome

=end

def get_substrs(str)
  substrs = []
  (0...str.length).each do |start_index|
    (start_index...str.length).each do |end_index|
      substrs << str[start_index..end_index]
    end
  end
  substrs
end

def is_palindrome?(str)
  str == str.reverse
end

def remove_palindrome_sub(str)
  count = 0
  until str.empty?
    substrs = get_substrs(str)
    longest_palindrome_substr = substrs.select { |substr| is_palindrome?(substr) }.max_by { |substr| substr.length }
    str = str.gsub(longest_palindrome_substr, '')
    count += 1
  end
  count
end

p remove_palindrome_sub('ababa') == 1
p remove_palindrome_sub('abb') == 2
p remove_palindrome_sub('baabb') == 2
